import tkinter as tk
import csv
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
from tkinter import simpledialog
from tkinter import filedialog as fd
from PIL import ImageTk, Image
# import PIL.Image
import sqlite3 as sqltor
import matplotlib.pyplot as plt

REGISTER_FILE = 'registered_users.csv'





conn=sqltor.connect('main.db') #main database
cursor=conn.cursor() #main cursor
cursor.execute("""CREATE TABLE IF NOT EXISTS poll (name)""")

def create_register_file():
    with open(REGISTER_FILE, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(['Username', 'Password'])




def register():
    username = reg_username.get()
    password = reg_password.get()

    # Check if the username is already registered
    with open(REGISTER_FILE, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row and row[0] == username:
                messagebox.showerror('Error', 'Username already exists.')
                return

    # Register the user
    with open(REGISTER_FILE, 'a', newline='') as file:
        writer = csv.writer(file)
        writer.writerow([username, password])
    
    messagebox.showinfo('Success', 'Registration successful.')

def login():
    username = login_username.get()
    password = login_password.get()

    # Check if the username and password match
    with open(REGISTER_FILE, 'r') as file:
        reader = csv.reader(file)
        for row in reader:
            if row and row[0] == username and row[1] == password:
                messagebox.showinfo('Success', 'Login successful.')
                # Allow the user to proceed with voting
                polls()
                return

    messagebox.showerror('Error', 'Invalid username or password.')




# Create labels and entry fields for registration
label1 = tk.Label(home, text="Register", font=("Times New Roman", 16, "bold"), bg="white")
label1.place(relx=0.5, rely=0.35, anchor="se")

reg_username = tk.Entry(home, width=30, font=("Times New Roman", 12))
reg_username.place(relx=0.5, rely=0.42, anchor="se")

reg_password = tk.Entry(home, width=30, font=("Times New Roman", 12), show='*')
reg_password.place(relx=0.5, rely=0.47, anchor="se")

button4 = tk.Button(home, text="Register", font=("Times New Roman", 12), relief="flat", command=register)
button4.place(relx=0.5, rely=0.53, anchor="se")

# Create labels and entry fields for login
label2 = tk.Label(home, text="Login", font=("Times New Roman", 16, "bold"), bg="white")
label2.place(relx=0.5, rely=0.65, anchor="se")

login_username = tk.Entry(home, width=30, font=("Times New Roman", 12))
login_username.place(relx=0.5, rely=0.72, anchor="se")

login_password = tk.Entry(home, width=30, font=("Times New Roman", 12), show='*')
login_password.place(relx=0.5, rely=0.77, anchor="se")

button5 = tk.Button(home, text="Login", font=("Times New Roman", 12), relief="flat", command=login)
button5.place(relx=0.5, rely=0.83, anchor="se")






def pollpage(): #page for polling

     def proceed():
        chose=choose.get()
        print(chose)
        command='update polling set votes=votes+1 where name=?'
        pd.execute(command,(chose,))
        pd.commit()
        messagebox.showinfo('Success!','You have voted')
        
     choose=StringVar()
     names=[]
     pd=sqltor.connect(plname+'.db') #poll database
     pcursor=pd.cursor() #poll cursor
     pcursor.execute('select name from polling')
     data=pcursor.fetchall()
     
     for i in range(len(data)):
         data1=data[i]
         ndata=data1[0]
         names.append(ndata)
         
     print(names)
     ppage=Toplevel()
     ppage.geometry('700x700')
     ppage.title('Poll')


     Label(ppage,text='Vote for any one person!').grid(row=1,column=3)
     for i in range(len(names)):
         Radiobutton(ppage,text=names[i],value=names[i],variable=choose).grid(row=2+i,column=1)
     Button(ppage,text='Vote',command=proceed).grid(row=2+i+1,column=2)


def polls(): #mypolls
    def proceed():
        global plname
        plname=psel.get()
        if plname=='-select-':
            return messagebox.showerror('Error','select poll')
        else:
            mpolls.destroy()
            pollpage()
    cursor.execute('select name from poll')
    data=cursor.fetchall()
    pollnames=['-select-']
    for i in range(len(data)):
        data1=data[i]
        ndata=data1[0]
        pollnames.append(ndata)
    psel=StringVar()
    mpolls=Toplevel()
    mpolls.geometry('270x200')
    mpolls.title('Voting Program')
    Label(mpolls,text='Select Poll',font='Helvetica 16 bold').grid(row=1,column=3)
    select=ttk.Combobox(mpolls,values=pollnames,state='readonly',textvariable=psel)
    select.grid(row=2,column=3)
    select.current(0)
    Button(mpolls,text='Proceed',command=proceed).grid(row=2,column=4)



def create():
    def proceed():
        global pcursor
        pname=name.get() #pollname
        can=cname.get()   #candidatename
        if pname=='':
            return messagebox.showerror('Error','Enter poll name',relx=5.5, rely=5.5, anchor="se")
        elif can=='':
            return messagebox.showerror('Error','Enter candidates',relx=5.5, rely=5.5, anchor="se")
        else:
            candidates=can.split(',') #candidate list
            command='insert into poll (name) values (?);'
            cursor.execute(command,(pname,))
            conn.commit()
            pd=sqltor.connect(pname+'.db') #poll database
            pcursor=pd.cursor() #poll cursor
            pcursor.execute("""CREATE TABLE IF NOT EXISTS polling
                 (name TEXT,votes INTEGER)""")
            for i in range(len(candidates)):
                command='insert into polling (name,votes) values (?, ?)'
                data=(candidates[i],0)
                pcursor.execute(command,data)
                pd.commit()
            pd.close()
            messagebox.showinfo('Success!','Poll Created')
            cr.destroy()

    name=StringVar()
    cname=StringVar()
    cr=Toplevel()
    cr.geometry('1000x600')
    cr.title('Create a new poll')

    background_image = Image.open("MyPollbck.jpg")
    background_image = background_image.resize((1000, 600), Image.ANTIALIAS)
    background_photo = ImageTk.PhotoImage(background_image)
    
    canvas = tk.Canvas(home, width=1000, height=600)
    canvas.pack()
    canvas.create_image(0, 0, anchor=tk.NW, image=background_photo)

    label1 = tk.Label(cr, text="Enter Details", font=("Times New Roman", 14, "bold"))
    label1.place(relx=0.5, rely=0.1, anchor="se")

    label1 = tk.Label(cr, text="Enter Poll Name :", font=("Times New Roman", 12, "bold"))
    label1.place(relx=0.2, rely=0.2, anchor="se")
    
    entry = tk.Entry(cr, width=30,textvariable=name , font=("Times New Roman", 12, "bold"))
    entry.place(relx=0.5, rely=0.2, anchor="se")

    label1 = tk.Label(cr, text="eg : captains elections :", font=("Times New Roman", 12, "bold"))
    label1.place(relx=0.7, rely=0.2, anchor="se")
    
    label1 = tk.Label(cr, text="Enter Candidates :", font=("Times New Roman", 12, "bold"))
    label1.place(relx=0.21, rely=0.3, anchor="se")

    entry = tk.Entry(cr, width=30,textvariable=cname , font=("Times New Roman", 12, "bold"))
    entry.place(relx=0.5, rely=0.3, anchor="se")

    label1 = tk.Label(cr, text="NOTE : Note: Enter the candidate names one by one by putting commas", font=("Times New Roman", 12, "bold"))
    label1.place(relx=1.0, rely=0.3, anchor="se")

    button1 = tk.Button(cr, text="Create New Poll",bg="gray", font=("Times New Roman", 18), relief="flat",command=proceed)
    button1.place(relx=0.5, rely=0.4, anchor="se")
    button1.bind("<Enter>", on_enter)
    button1.bind("<Leave>", on_leave)

    # Label(cr,text='Enter Details',font='Helvetica 12 bold').grid(row=1,column=2)
    # Label(cr,text='Enter Poll name: ').grid(row=2,column=1)
    # Entry(cr,width=30,textvariable=name).grid(row=2,column=2) #poll name
    # Label(cr,text='(eg: captain elections)').place(x=354,y=25)
    # Label(cr,text='Enter Candidates: ').grid(row=3,column=1)
    # Entry(cr,width=45,textvariable=cname).grid(row=3,column=2) #candidate name
    # Label(cr,text='Note: Enter the candidate names one by one by putting commas').grid(row=4,column=2)
    # Label(cr,text='eg: candidate1,candate2,candidate3....').grid(row=5,column=2)
    # Button(cr,text='Proceed',command=proceed).grid(row=6,column=2)
def selpl(): #pollresults
    def results():
        sel=sele.get()  #selected option
        if sel=='-select-':
            return messagebox.showerror('Error','Select Poll')
        else:
            pl.destroy()
            def project():
                names=[]
                votes=[]
                for i in range(len(r)):
                    data=r[i]
                    names.append(data[0])
                    votes.append(data[1])
                    plt.title('Poll Result')
                plt.pie(votes,labels=names,autopct='%1.1f%%',shadow=True,startangle=140)
                plt.axis('equal')
                plt.show()

            res=Toplevel() #result-page
            res.geometry('300x300')
            res.title('Results!')
            Label(res,text='Here is the Result!',font='Helvetica 12 bold').grid(row=1,column=2)
            con=sqltor.connect(sel+'.db')
            pcursor=con.cursor()
            pcursor.execute('select * from polling')
            r=pcursor.fetchall() #data-raw
            for i in range(len(r)):
                data=r[i]
                Label(res,text=data[0]+': '+str(data[1])+' votes').grid(row=2+i,column=1)
            Button(res,text='Project Results',command=project).grid(row=2+i+1,column=2)


    cursor.execute('select name from poll')
    data=cursor.fetchall()
    pollnames=['-select-']
    for i in range(len(data)):
        data1=data[i]
        ndata=data1[0]
        pollnames.append(ndata)
    sele=StringVar()
    pl=Toplevel()
    pl.geometry('300x200')
    pl.title('Voting System')
    Label(pl,text='Select Poll',font='Helvetica 12 bold').grid(row=1,column=1)
    sel=ttk.Combobox(pl,values=pollnames,state='readonly',textvariable=sele)
    sel.grid(row=2,column=1)
    sel.current(0)
    Button(pl,text='Get Results',command=results).grid(row=2,column=2)
def about():
    messagebox.showinfo('About','Developed by Andrew')


home=tk.Tk()
home.geometry('700x500')
home.title('Voting Program')
# home['bg'] = '#49A'

# Front end


background_image = Image.open("voating.jpg")
background_image = background_image.resize((700, 500), Image.ANTIALIAS)
background_photo = ImageTk.PhotoImage(background_image)

canvas = tk.Canvas(home, width=700, height=500)
canvas.pack()
canvas.create_image(0, 0, anchor=tk.NW, image=background_photo)




# tk.Label(home,text='voting program made in python',font='Helvetica 12 bold',bg='#49A').grid(row=1,column=2)
label = tk.Label(home, text="Voating Program", font=("Times New Roman", 18, "bold"),bg="white")
label.place(relx=0.5, rely=0.1, anchor="se")


def on_enter(event):
    event.widget.config(bg="gray")

def on_leave(event):
    event.widget.config(bg="gray")



# Set the background image
# background_image = ImageTk.PhotoImage(Image.open("voating.jpg"))
# background_label = tk.Label(home, image=background_image)
# background_label.place(relwidth=1, relheight=1)

# Create buttons
button1 = tk.Button(home, text="Create New Poll", font=("Times New Roman", 18), relief="flat",command=create)
button2 = tk.Button(home, text="My Polls", font=("Times New Roman", 18), relief="flat",command=polls)
button3 = tk.Button(home, text="Polls Results", font=("Times New Roman", 18), relief="flat",command=selpl)

# Bind hover events to buttons
button1.bind("<Enter>", on_enter)
button1.bind("<Leave>", on_leave)
button2.bind("<Enter>", on_enter)
button2.bind("<Leave>", on_leave)
button3.bind("<Enter>", on_enter)
button3.bind("<Leave>", on_leave)

# Place buttons vertically at the center
button1.place(relx=0.37, rely=0.35, anchor="se")
button2.place(relx=0.27, rely=0.50, anchor="se")
button3.place(relx=0.32, rely=0.65, anchor="se")

label = tk.Label( home , text= " project by : Aditya Raul & Rutuja Ingale",font=("Times New Roman",12,"bold"),fg="white",bg="#00008B")
label.place(relx=0.2, rely= 0.99, anchor="s")





# tk.Button(home,text='Create new Poll +',command=create).grid(row=3,column=2)
# tk.Button(home,text='My Polls',command=polls).grid(row=4,column=2)
# tk.Button(home,text='Poll Results',command=selpl).grid(row=5,column=2)
# tk.Label(home,text=' Project Contributors : Aditya Raul & Rutuja Ingale ',bg='#49A').grid(row=6,column=2)

# tk.Button(home,text='About',command=about).grid(row=1,column=3)
home.mainloop()




New code 


# import tkinter as tk
# import csv
# from tkinter import *
# from tkinter import ttk
# from tkinter import messagebox
# from tkinter import simpledialog
# from tkinter import filedialog as fd
# from PIL import ImageTk, Image
# import subprocess
# import sqlite3 as sqltor
# import matplotlib.pyplot as plt

# REGISTER_FILE = 'registered_users.csv'
# current_page = None
# conn = sqltor.connect('main.db')  # main database
# cursor = conn.cursor()  # main cursor
# cursor.execute("""CREATE TABLE IF NOT EXISTS poll (name)""")

# def create_register_file():
#     with open(REGISTER_FILE, 'w', newline='') as file:
#         writer = csv.writer(file)
#         writer.writerow(['Username', 'Password'])

# def open_admin_page():
#     global current_page
#     current_page = 'login'
#     login_window = tk.Tk()
#     login_window.geometry('400x200')
#     login_window.title('Login Page')

#     login_button = tk.Button(login_window, text='Admins Login', command=login)
#     login_button.pack(pady=20)

#     register_button = tk.Button(login_window, text='Users Login', command=open_register_page)
#     register_button.pack()

#     login_window.mainloop()

# def open_register_page():
#     global current_page
#     current_page = 'register'
#     register_window = tk.Tk()
#     register_window.geometry('400x200')
#     register_window.title('Register Page')

#     register_button = tk.Button(register_window, text='Register', command=register)
#     register_button.pack(pady=20)

#     login_button = tk.Button(register_window, text='Login', command=open_login_page)
#     login_button.pack()

#     register_window.mainloop()
# def register():
#     username = reg_username.get()
#     password = reg_password.get()

#     # Check if the username is already registered
#     with open(REGISTER_FILE, 'r') as file:
#         reader = csv.reader(file)
#         for row in reader:
#             if row and row[0] == username:
#                 messagebox.showerror('Error', 'Username already exists.')
#                 return

#     # Register the user
#     with open(REGISTER_FILE, 'a', newline='') as file:
#         writer = csv.writer(file)
#         writer.writerow([username, password])

#     messagebox.showinfo('Success', 'Registration successful.')
#     open_login_page()

# login_window = None  # Declare login_window as a global variable

# def open_pollings_page():
#     global login_window  
#     login_window.destroy() 
#     subprocess.Popen(['python3', 'Polling.py'])

# def login():
#     username = login_username.get()
#     password = login_password.get()

#     # Check if the username and password match
#     with open(REGISTER_FILE, 'r') as file:
#         reader = csv.reader(file)
#         for row in reader:
#             if row and row[0] == username and row[1] == password:
#                 messagebox.showinfo('Success', 'Login successful.')
#                 open_pollings_page()
#                 return

#     messagebox.showerror('Error', 'Invalid username or password.')
#     open_login_page()

# def open_login_page():
#     global login_username  # Declare login_username as a global variable
#     global login_password
#     global login_window  
#     root.destroy()  # Close the registration page window
#     login_window = tk.Tk()
#     login_window.geometry('400x200')
#     login_window.title('Login')

#     login_frame = tk.Frame(login_window)
#     login_frame.pack(pady=20)

#     tk.Label(login_frame, text='Username:').grid(row=0, column=0, padx=5, pady=5)
#     login_username = tk.Entry(login_frame)
#     login_username.grid(row=0, column=1, padx=5, pady=5)

#     tk.Label(login_frame, text='Password:').grid(row=1, column=0, padx=5, pady=5)
#     login_password = tk.Entry(login_frame, show='*')
#     login_password.grid(row=1, column=1, padx=5, pady=5)

#     login_button = tk.Button(login_frame, text='Login', command=login)
#     login_button.grid(row=2, columnspan=2, padx=5, pady=5)

#     login_window.mainloop()

# def pollpage(plname):
#     def proceed():
#         chosen = choose.get()
#         print(chosen)
#         command = 'UPDATE polling SET votes = votes + 1 WHERE name = ?'
#         pd.execute(command, (chosen,))
#         pd.commit()
#         messagebox.showinfo('Success!', 'You have voted')

#     choose = StringVar()
#     names = []
#     pd = sqltor.connect(plname + '.db')  # poll database
#     c = pd.cursor()  # poll cursor
#     command = 'SELECT * FROM polling'
#     c.execute(command)
#     rows = c.fetchall()
#     for row in rows:
#         names.append(row[0])
#     c.close()
#     pd.close()

#     poll_window = Tk()
#     poll_window.title("Voting Page")
#     poll_window.geometry("400x200")

#     # Create and position the widgets
#     label = Label(poll_window, text="Select your choice:")
#     label.pack()

#     choose.set(names[0])
#     for name in names:
#         rb = Radiobutton(poll_window, text=name, variable=choose, value=name)
#         rb.pack(anchor=W)

#     button = Button(poll_window, text="Proceed", command=proceed)
#     button.pack()

#     poll_window.mainloop()

# def open_register_page():
#     global reg_username  # Declare reg_username as a global variable
#     global reg_password
#     global root  
#     root.destroy()  # Close the login page window
#     reg_window = tk.Tk()
#     reg_window.geometry('400x200')
#     reg_window.title('Register')

#     reg_frame = tk.Frame(reg_window)
#     reg_frame.pack(pady=20)

#     tk.Label(reg_frame, text='Username:').grid(row=0, column=0, padx=5, pady=5)
#     reg_username = tk.Entry(reg_frame)
#     reg_username.grid(row=0, column=1, padx=5, pady=5)

#     tk.Label(reg_frame, text='Password:').grid(row=1, column=0, padx=5, pady=5)
#     reg_password = tk.Entry(reg_frame, show='*')
#     reg_password.grid(row=1, column=1, padx=5, pady=5)

#     register_button = tk.Button(reg_frame, text='Register', command=register)
#     register_button.grid(row=2, columnspan=2, padx=5, pady=5)

#     reg_window.mainloop()


# # Check if the register file exists, if not create one
# try:
#     with open(REGISTER_FILE, 'r'):
#         pass
# except FileNotFoundError:
#     create_register_file()

# root = tk.Tk()
# root.geometry('400x200')
# root.title('Login Page')

# frame = tk.Frame(root)
# frame.pack(pady=20)

# login_button = tk.Button(frame, text='Admin Login', command=open_login_page)
# login_button.grid(row=0, column=0, padx=5, pady=5)

# register_button = tk.Button(frame, text='Users Login', command=open_register_page)
# register_button.grid(row=0, column=1, padx=5, pady=5)

# root.mainloop()

